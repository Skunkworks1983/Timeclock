/*
 * This file is generated by jOOQ.
 */
package io.github.skunkworks1983.timeclock.db.generated.tables;


import io.github.skunkworks1983.timeclock.db.generated.DefaultSchema;
import io.github.skunkworks1983.timeclock.db.generated.Keys;
import io.github.skunkworks1983.timeclock.db.generated.tables.records.MembertransactionsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Membertransactions extends TableImpl<MembertransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MemberTransactions</code>
     */
    public static final Membertransactions MEMBERTRANSACTIONS = new Membertransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembertransactionsRecord> getRecordType() {
        return MembertransactionsRecord.class;
    }

    /**
     * The column <code>MemberTransactions.time</code>.
     */
    public final TableField<MembertransactionsRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>MemberTransactions.tableName</code>.
     */
    public final TableField<MembertransactionsRecord, String> TABLENAME = createField(DSL.name("tableName"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>MemberTransactions.id</code>.
     */
    public final TableField<MembertransactionsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36), this, "");

    private Membertransactions(Name alias, Table<MembertransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Membertransactions(Name alias, Table<MembertransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MemberTransactions</code> table reference
     */
    public Membertransactions(String alias) {
        this(DSL.name(alias), MEMBERTRANSACTIONS);
    }

    /**
     * Create an aliased <code>MemberTransactions</code> table reference
     */
    public Membertransactions(Name alias) {
        this(alias, MEMBERTRANSACTIONS);
    }

    /**
     * Create a <code>MemberTransactions</code> table reference
     */
    public Membertransactions() {
        this(DSL.name("MemberTransactions"), null);
    }

    public <O extends Record> Membertransactions(Table<O> child, ForeignKey<O, MembertransactionsRecord> key) {
        super(child, key, MEMBERTRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MembertransactionsRecord> getPrimaryKey() {
        return Keys.MEMBERTRANSACTIONS__;
    }

    @Override
    public Membertransactions as(String alias) {
        return new Membertransactions(DSL.name(alias), this);
    }

    @Override
    public Membertransactions as(Name alias) {
        return new Membertransactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Membertransactions rename(String name) {
        return new Membertransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Membertransactions rename(Name name) {
        return new Membertransactions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
