/*
 * This file is generated by jOOQ.
 */
package io.github.skunkworks1983.timeclock.db.generated.tables;


import io.github.skunkworks1983.timeclock.db.generated.DefaultSchema;
import io.github.skunkworks1983.timeclock.db.generated.tables.records.SigninsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Signins extends TableImpl<SigninsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SignIns</code>
     */
    public static final Signins SIGNINS = new Signins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SigninsRecord> getRecordType() {
        return SigninsRecord.class;
    }

    /**
     * The column <code>SignIns.id</code>.
     */
    public final TableField<SigninsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>SignIns.time</code>.
     */
    public final TableField<SigninsRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>SignIns.isSigningIn</code>.
     */
    public final TableField<SigninsRecord, Integer> ISSIGNINGIN = createField(DSL.name("isSigningIn"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SignIns.isForce</code>.
     */
    public final TableField<SigninsRecord, Integer> ISFORCE = createField(DSL.name("isForce"), SQLDataType.INTEGER, this, "");

    private Signins(Name alias, Table<SigninsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Signins(Name alias, Table<SigninsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SignIns</code> table reference
     */
    public Signins(String alias) {
        this(DSL.name(alias), SIGNINS);
    }

    /**
     * Create an aliased <code>SignIns</code> table reference
     */
    public Signins(Name alias) {
        this(alias, SIGNINS);
    }

    /**
     * Create a <code>SignIns</code> table reference
     */
    public Signins() {
        this(DSL.name("SignIns"), null);
    }

    public <O extends Record> Signins(Table<O> child, ForeignKey<O, SigninsRecord> key) {
        super(child, key, SIGNINS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Signins as(String alias) {
        return new Signins(DSL.name(alias), this);
    }

    @Override
    public Signins as(Name alias) {
        return new Signins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Signins rename(String name) {
        return new Signins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Signins rename(Name name) {
        return new Signins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
